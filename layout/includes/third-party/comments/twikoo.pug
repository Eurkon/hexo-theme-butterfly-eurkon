script.
  (()=>{
    const $countDom = document.getElementById('twikoo-count')
    const init = () => {
      twikoo.init(Object.assign({
        el: '#twikoo-wrap',
        envId: '!{theme.twikoo.envId}',
        region: '!{theme.twikoo.region}',
        onCommentLoaded: function () {
          if(typeof window.mediumZoom!='undefined'){
            const zoomComment = mediumZoom(document.querySelectorAll('.tk-content :not(a)>img'))
            zoomComment.on('open', e => {
              const photoBg = document.documentElement.getAttribute('data-theme') === 'dark' ? '#121212' : '#fff'
              zoomComment.update({
                background: photoBg
              })
            })
          }
          if(GLOBAL_CONFIG.lightbox === 'fancybox'){
              const addFancybox = function (ele) {
                const runFancybox = (ele) => {
                  ele.each(function (i, o) {
                    const $this = $(o)
                    const lazyloadSrc = $this.attr('data-lazy-src') || $this.attr('src')
                    const dataCaption = $this.attr('alt') || ''
                    $this.wrap(`<a href="${lazyloadSrc}" data-fancybox="group" data-caption="${dataCaption}" class="fancybox"></a>`)
                  })

                  $().fancybox({
                    selector: '[data-fancybox]',
                    loop: true,
                    transitionEffect: 'slide',
                    protect: true,
                    buttons: ['slideShow', 'fullScreen', 'thumbs', 'close'],
                    hash: false
                  })
                }

                if (typeof $.fancybox === 'undefined') {
                  $('head').append(`<link rel="stylesheet" type="text/css" href="${GLOBAL_CONFIG.source.fancybox.css}">`)
                  $.getScript(`${GLOBAL_CONFIG.source.fancybox.js}`, function () {
                    runFancybox($(ele))
                  })
                } else {
                  runFancybox($(ele))
                }
              }
            addFancybox(document.querySelectorAll('.tk-content :not(a)>img'))
          }
        }
      }, !{JSON.stringify(theme.twikoo.option)}))
    }

    const getCount = () => {
      twikoo.getCommentsCount({
        envId: '!{theme.twikoo.envId}',
        region: '!{theme.twikoo.region}',
        urls: [window.location.pathname],
        includeReply: false
      }).then(function (res) {
        $countDom.innerText = res[0].count
      }).catch(function (err) {
        console.error(err);
      });
    }

    const loadTwikoo = (bool = false) => {
      if (typeof twikoo === 'object') {
        init()
        bool && $countDom && setTimeout(getCount,0)
      } else {
        getScript('!{theme.CDN.twikoo}').then(()=> {
          init()
          bool && $countDom && setTimeout(getCount,0)
        })
      }
    }

    if ('!{theme.comments.use[0]}' === 'Twikoo' || !!{theme.comments.lazyload}) {
      if (!{theme.comments.lazyload}) btf.loadComment(document.getElementById('twikoo-wrap'), loadTwikoo)
      else loadTwikoo(true)
    } else {
      window.loadOtherComment = () => {
        loadTwikoo()
      }
    }
  })()